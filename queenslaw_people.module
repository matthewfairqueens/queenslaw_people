<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_render().
 *
 * Remove duplicates caused by the "person type" relationship.
 */
function queenslaw_people_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'people') {
    $filtered_nids = [];
    foreach ($view->result as $key => $row) {
      if (in_array($row->nid, $filtered_nids)) unset($view->result[$key]);
      else $filtered_nids[] = $row->nid;
    }
  }
}
/**
 * Implements hook_page_attachments_alter().
 *
 * Add CSS rules for the colours per person type.
 */
function queenslaw_people_page_attachments_alter(array &$page) {
  $css = '';
  if ($types = _queenslaw_people_types()) {
    foreach ($types as $tid => $data) {
      if (isset($data['color']) && ($data['color'])) {
        $css .= <<<EOC
#views-exposed-form-people-page .form-item-person-type-{$tid} label:before {
  border-color: {$data['color']};
}
#views-exposed-form-people-page .form-item-person-type-{$tid}.active label:before {
  background-color: {$data['color']};
}
EOC;
      }
    }
  }
  if ($css) {
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'style',
        '#value' => $css,
      ],
      'queenslaw-people',
    ];
  }
}
/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the person type filter to the Views exposed people filter.
 */
function queenslaw_people_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // $form_id is generic ("views_exposed_form"), but $form['#id'] actually identifies the
  // form, so check that.
  $alter_forms = [
    'views-exposed-form-people-page' => 'directory',
    'views-exposed-form-people-faculty-block' => 'faculty',
  ];
  if (isset($form['#id']) && (array_key_exists($form['#id'], $alter_forms))) {
    $condition = $alter_forms[$form['#id']];
    if ($types = _queenslaw_people_types($condition)) {
      $options = [];
      foreach ($types as $tid => $data) $options[$tid] = $data['name'];
      $form['#attached']['library'][] = 'queenslaw_people/queenslaw-people';
      $form['person_type'] = [
        '#type' => 'checkboxes',
        '#multiple' => TRUE,
        '#options' => $options,
        '#weight' => 999,
      ];
    }
  }
}
/**
 * Return person type data;
 */
function _queenslaw_people_types($condition = FALSE) {
  $types = [];
  if ($terms = \Drupal::entityManager()->getStorage('taxonomy_term')->loadTree('person_types', 0, NULL, TRUE)) {
    foreach ($terms as $term) {
      $include = FALSE;
      if ($condition) {
        $condition_field = "field_{$condition}";
        if ($term->hasField($condition_field)) {
          if (($condition_value = $term->get($condition_field)->getString()) && ($condition_value == 1)) $include = TRUE;
        }
      }
      else $include = TRUE;
      if ($include) {
        $tid = $term->id();
        $types[$tid] = [
          'name' => $term->getName(),
        ];
        if ($term->hasField('field_color')) {
          if ($color = $term->get('field_color')->getString()) $types[$tid]['color'] = $color;
        }
      }
    }
  }
  return $types;
}
/**
 * Build a value for the computed field used as a filter on the directory page.
 *
 */
function computed_field_field_person_filter_compute($entity_type_manager, $entity, $fields, $delta) {
  $values = [];
  $source_fields = [
    'text' => [
      'body',
      'field_achievement',
      'field_degree',
      'field_designationn',
      'field_first_name',
      'field_home_organization',
      'field_home_organization_title',
      'field_last_name',
      'field_title',
    ],
    'taxonomy' => [
      'field_office_clinic_or_program',
      'field_person_type',
      'field_teaching_and_research',
      'field_team_or_committee',
    ],
  ];
  $tids = [];
  foreach ($source_fields as $field_type => $field_names) {
    foreach ($field_names as $field_name) {
      if ($entity->hasField($field_name)) {
        foreach ($entity->get($field_name)->getValue() as $field_value) {
          if (($field_type == 'text') && (isset($field_value['value']))) $values[] = $field_value['value'];
          elseif (($field_type == 'taxonomy') && (isset($field_value['target_id']))) $tids[] = $field_value['target_id'];
        }
      }
    }
  }
  if (!empty($tids)) {
    $terms = Term::loadMultiple($tids);
    foreach ($terms as $term) $values[] = $term->getName();
  }
  $value = implode(' ', $values);
  return $value;
}
